# Quarkus-Cafe-Web

# Configuration file
# key = value

# Application Properties
# URL for SSE
%dev.sourceUrl=http://localhost:8080/dashboard/stream
%dev.orderUrl=http://localhost:8080
%test.sourceUrl=http://localhost:8080/dashboard/stream
sourceUrl=${STREAM_URL}
orderUrl=${CORS_ORIGINS}
%dev.storeId=devStoreId
%test.storeId=testStoreId
%prod.storeId=${STORE_ID}

# HTTP
quarkus.http.cors=true
%dev.quarkus.http.cors.origins=http://localhost
quarkus.http.cors.origins=${CORS_ORIGINS}
quarkus.http.cors.methods=GET,PUT,POST
quarkus.http.cors.headers=X-Custom,accept, origin, authorization, content-type, x-requested-with
quarkus.http.cors.exposed-headers=Content-Disposition
quarkus.http.cors.access-control-max-age=24H

## Ports
%dev.quarkus.http.port=8080

## Logging
quarkus.log.level=INFO
quarkus.log.category."io.quarkuscoffeeshop".level=DEBUG
quarkus.log.category."org.apache.kafka".level=ERROR

# DATABASE
%dev.quarkus.datasource.db-kind=postgresql
%dev.quarkus.datasource.username=cafeuser
%dev.quarkus.datasource.password=redhat-20
%dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/cafedb?currentSchema=cafeuser
%dev.quarkus.hibernate-orm.database.default-schema=cafeuser

%dev.quarkus.hibernate-orm.log.sql=true
%dev.quarkus.hibernate-orm.database.generation = drop-and-create

# REST CLIENT
%dev.io.quarkuscoffeeshop.web.infrastructure.OrderService/mp-rest/url=http://localhost:8083
%dev.io.quarkuscoffeeshop.web.infrastructure.OrderService/mp-rest/scope=javax.inject.Singleton

io.quarkuscoffeeshop.web.infrastructure.OrderService/mp-rest/url=http://core-cafe.apps.ocp4.home.ocpcloud.com
io.quarkuscoffeeshop.web.infrastructure.OrderServicee/mp-rest/scope=javax.inject.Singleton

# Kafka

## Outgoing

%dev.mp.messaging.outgoing.orders-out.connector=smallrye-kafka
#%dev.mp.messaging.outgoing.orders-out.bootstrap.servers=localhost:9092
%dev.mp.messaging.outgoing.orders-out.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
%dev.mp.messaging.outgoing.orders-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%dev.mp.messaging.outgoing.orders-out.topic=orders

mp.messaging.outgoing.orders-out.connector=smallrye-kafka
mp.messaging.outgoing.orders-out.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
mp.messaging.outgoing.orders-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.orders-out.topic=orders

### Incoming

%dev.mp.messaging.incoming.web-updates.connector=smallrye-kafka
%dev.mp.messaging.incoming.web-updates.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
%dev.mp.messaging.incoming.web-updates.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%dev.mp.messaging.incoming.web-updates.broadcast=true
%dev.mp.messaging.incoming.web-updates.topic=web-updates


mp.messaging.incoming.web-updates.connector=smallrye-kafka
mp.messaging.incoming.web-updates.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
mp.messaging.incoming.web-updates.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.web-updates.broadcast=true
mp.messaging.incoming.web-updates.topic=web-updates

#### Topic orders
%dev.mp.messaging.incoming.orders.connector=smallrye-kafka
%dev.mp.messaging.incoming.orders.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
%dev.mp.messaging.incoming.orders.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
# %dev.mp.messaging.incoming.orders-in.topic=orders

mp.messaging.incoming.orders.connector=smallrye-kafka
mp.messaging.incoming.orders.bootstrap.servers=${KAFKA_BOOTSTRAP_URLS}
mp.messaging.incoming.orders.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

